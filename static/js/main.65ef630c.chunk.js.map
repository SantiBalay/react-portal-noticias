{"version":3,"sources":["components/Header.js","components/Noticia.js","components/Noticias.js","components/Form.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","titulo","Noticia","data","title","description","url","urlToImage","src","alt","href","target","Noticias","TransitionGroup","this","noticias","map","noticia","CSSTransition","classNames","timeout","key","Component","Form","categoriaRef","React","createRef","enviarDatos","e","preventDefault","categoria","current","value","enviarCategoria","onSubmit","ref","defaultValue","type","App","state","consultarNoticias","apiKey","fetch","then","resultado","json","datos","setState","articles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQAYeA,EAVA,SAACC,GACZ,OACI,6BACI,yBAAKC,UAAU,mCACX,uBAAGA,UAAU,qBAAb,IAAmCD,EAAME,OAAzC,Q,gBCyBDC,EA7BC,SAACH,GAAW,IAAD,EAEmBA,EAAMI,KAAzCC,EAFgB,EAEhBA,MAAMC,EAFU,EAEVA,YAAYC,EAFF,EAEEA,IAAIC,EAFN,EAEMA,WAE7B,OACI,yBAAKP,UAAU,iBACX,yBAAKA,UAAU,QAEX,yBAAKA,UAAU,cACX,yBAAKQ,IAAKD,EAAYE,IAAKL,KAG/B,yBAAKJ,UAAU,gBACX,gCAAMI,EAAN,KACA,+BAAKC,EAAL,MAGJ,yBAAKL,UAAU,eACX,uBAAGU,KAAMJ,EAAKK,OAAQP,EAAOJ,UAAU,mBAAvC,oBCYLY,E,iLAxBP,OACI,yBAAKZ,UAAU,OACX,kBAACa,EAAA,EAAD,KAEQC,KAAKf,MAAMgB,SACVC,KAAK,SAAAC,GAAO,OACT,kBAACC,EAAA,EAAD,CACIC,WAAW,OACXC,QAAS,IACTC,IAAKJ,EAAQX,KAEb,kBAAC,EAAD,CACIH,KAAMc,c,GAfnBK,aCwCRC,E,2MAzCXC,aAAeC,IAAMC,Y,EAErBC,YAAc,SAACC,GAEXA,EAAEC,iBAEF,IAAMC,EAAY,EAAKN,aAAaO,QAAQC,MAE5C,EAAKjC,MAAMkC,gBAAgBH,I,wEAI3B,OACI,yBAAK9B,UAAU,gBACX,yBAAKA,UAAU,wBACX,0BAAMkC,SAAUpB,KAAKa,aACjB,wDAEA,yBAAK3B,UAAU,0BACX,4BAAQmC,IAAKrB,KAAKU,cACd,4BAAQQ,MAAM,UAAUI,cAAY,GAApC,aACA,4BAAQJ,MAAM,WAAWI,cAAY,GAArC,cACA,4BAAQJ,MAAM,gBAAgBI,cAAY,GAA1C,qBACA,4BAAQJ,MAAM,SAASI,cAAY,GAAnC,WACA,4BAAQJ,MAAM,UAAUI,cAAY,GAApC,aACA,4BAAQJ,MAAM,SAASI,cAAY,GAAnC,aACA,4BAAQJ,MAAM,aAAaI,cAAY,GAAvC,kBAIP,yBAAKpC,UAAU,iCACR,2BAAOqC,KAAK,SAASrC,UAAU,qBAAqBgC,MAAM,mB,GAjCvEV,aCmDJgB,E,2MA9CbC,MAAQ,CACNxB,SAAU,I,EAQZyB,kBAAoB,WAA4B,IAA3BV,EAA0B,uDAAd,UAEzBW,EAAS,mCAEXnC,EAAG,mEAA+DwB,EAA/D,mBAAmFW,GAE1FC,MAAMpC,GACLqC,MAAM,SAACC,GACJ,OAAOA,EAAUC,UAEpBF,MAAM,SAAAG,GACL,EAAKC,SAAS,CACZhC,SAAU+B,EAAME,e,mFAfpBlC,KAAK0B,sB,+BAuBL,OACE,yBAAKxC,UAAU,kBACb,kBAAC,EAAD,CAAQC,OAAO,uBAEf,yBAAKD,UAAU,uCAEb,kBAAC,EAAD,CACEiC,gBAAiBnB,KAAK0B,oBAGvB,kBAAC,EAAD,CAAUzB,SAAUD,KAAKyB,MAAMxB,iB,GAxCxBO,aCME2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.65ef630c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return (\n        <nav>\n            <div className=\"nav-wrapper light-blue darken-3\">\n                <a className=\"brand-logo center\"> {props.titulo} </a>\n            </div>\n        </nav>\n    );\n};\n\nexport default Header;","import React from 'react';\n\nconst Noticia = (props) => {\n\n    const {title,description,url,urlToImage}= props.data\n\n    return (\n        <div className=\"col s12 m6 l4\">\n            <div className=\"card\">\n\n                <div className=\"card-image\">\n                    <img src={urlToImage} alt={title}/>\n                </div>\n\n                <div className=\"card-content\"> \n                    <h3> {title} </h3>\n                    <p> {description} </p>\n                </div>\n\n                <div className=\"card-action\">\n                    <a href={url} target={title} className=\"waves-light btn\">\n                        Leer noticia\n                    </a>\n\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default Noticia;","import React, { Component } from 'react'\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\n\nimport Noticia from './Noticia'\n\nclass Noticias extends Component {\n   \n    render() {  \n        return (  \n            <div className=\"row\">\n                <TransitionGroup>\n                    {\n                        this.props.noticias\n                        .map( noticia => (\n                            <CSSTransition\n                                classNames=\"fade\"\n                                timeout={1000}\n                                key={noticia.url}\n                            >\n                                <Noticia \n                                    data={noticia}\n                                />\n\n                            </CSSTransition>\n                        ))}\n              </TransitionGroup>\n            </div> \n\n        );\n    }\n}\n \nexport default Noticias;\n","import React, { Component } from 'react';\n\nclass Form extends Component {\n\n    categoriaRef = React.createRef()\n\n    enviarDatos = (e) => {\n\n        e.preventDefault()\n\n        const categoria = this.categoriaRef.current.value\n\n        this.props.enviarCategoria(categoria)\n    }\n\n    render() { \n        return ( \n            <div className=\"buscador row\">\n                <div className=\"col s12 m8 offset-m2\">\n                    <form onSubmit={this.enviarDatos}>\n                        <h2> Noticias por categorias</h2>\n\n                        <div className=\"input-field col s12 m8\">\n                            <select ref={this.categoriaRef} >\n                                <option value=\"general\" defaultValue> General </option>\n                                <option value=\"business\" defaultValue> Negocios </option>\n                                <option value=\"entertainment\" defaultValue> Entretenimiento </option>\n                                <option value=\"health\" defaultValue> Salud </option>\n                                <option value=\"science\" defaultValue> Ciencia </option>\n                                <option value=\"sports\" defaultValue> Deporte </option>\n                                <option value=\"technology\" defaultValue> Tecnologia </option>\n                            </select>\n                        </div>\n\n                         <div className=\"input-field col s12 m4 enviar\">\n                                <input type=\"submit\" className=\"btn amber darken-2\" value=\"Buscar\"/>\n                        </div>\n                        \n                    </form>\n                </div>\n            </div>\n         );\n    }\n}\n \nexport default Form;","import React, { Component } from 'react';\n\nimport Header from './Header'\nimport Noticias from './Noticias'\nimport Form from './Form'\n\nclass App extends Component {\n  state = {  \n    noticias: []\n  }\n\n\n  componentDidMount() {\n    this.consultarNoticias()\n  }\n\n  consultarNoticias = (categoria = \"general\") => {\n\n    const apiKey = '547e4337afa0472893b7c31c4f0ddeda'\n\n    let url = `https://newsapi.org/v2/top-headlines?country=us&category=${categoria}&apiKey=${apiKey}`\n\n    fetch(url)\n    .then( (resultado) => {\n        return resultado.json()\n      })\n    .then( datos => {\n      this.setState({\n        noticias: datos.articles\n      })\n    })\n\n  }\n  \n\n  render() { \n    return (  \n      <div className=\"contenedor-app\">\n        <Header titulo=\"Portal de Noticias\"/>\n\n        <div className=\"container white contenedor-noticias\">\n\n          <Form\n            enviarCategoria={this.consultarNoticias}\n          />\n\n           <Noticias noticias={this.state.noticias}/>\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}